{"version":3,"sources":["assests/nasa-logo.svg","logo.svg","component/SearchForm/SearchForm.js","api/APIData.js","component/Error/Error.js","component/DataDisplay/DataDisplay.js","component/Search/Search.js","component/Header/Header.js","component/Hero/Hero.js","component/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SeachForm","getApiData","onSubmit","e","preventDefault","dateParam","document","querySelector","value","type","placeholder","apiData","DATE","a","fetch","catch","err","data","ok","json","error","className","title","date","explanation","hdurl","src","alt","Search","props","getData","setState","state","copyright","media_type","service_version","url","this","DataDisplay","Error","Component","nasaLogo","logo","App","Header","Hero","Footer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","console","message"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,+UCoB5BC,G,MAjBG,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACnB,OACE,0BACEC,SAAU,SAACC,GACTA,EAAEC,iBACF,IAAMC,EAAYC,SAASC,cAAc,SAASC,MAClDP,EAAWI,KAGb,2BAAOI,KAAK,OAAOC,YAAY,sCAC/B,4BAAQD,KAAK,SAASD,MAAM,UAA5B,a,OCQSG,EAfF,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACKC,MAAM,GAAD,OALT,sCAKS,oBANV,2CAMU,gBAJf,EAIe,iBAC0BF,IAChDG,OAAM,SAACC,GACP,OAAOA,KAJK,YACRC,EADQ,QAQTC,GARS,2DASUD,EAAKE,OATf,0DASwBD,IAAI,GAArCC,GATS,gDAUTA,EAAO,CAAED,IAAI,EAAOE,MAAO,iBAVlB,iCAYPD,GAZO,4CAAH,sDCHE,G,MAAA,WACb,OACE,yBAAKE,UAAU,mBACb,sCACA,kFCJS,G,MAAA,YAAe,IAAZJ,EAAW,EAAXA,KACRK,EAAoCL,EAApCK,MAAOC,EAA6BN,EAA7BM,KAAMC,EAAuBP,EAAvBO,YAAaC,EAAUR,EAAVQ,MAClC,OACE,kBAAC,WAAD,KACE,yBAAKJ,UAAU,oBACb,yBAAKK,IAAKD,EAAOE,IAAI,aAEvB,yBAAKN,UAAU,aACb,wBAAIA,UAAU,cAAcC,GAC5B,uBAAGD,UAAU,QAAQE,GACrB,uBAAGF,UAAU,YAAYG,OCyClBI,G,wDA9Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAmBR5B,WApBmB,uCAoBN,WAAOsB,GAAP,eAAAV,EAAA,sEACQiB,EAAQP,GADhB,OACLN,EADK,OAEX,EAAKc,SAAS,CAAEpB,QAASM,IAFd,2CApBM,sDAEjB,EAAKe,MAAQ,CACXrB,QAAS,CACPO,IAAI,EACJe,UAAW,qBACXV,KAAM,aACNC,YACE,8+BACFC,MACE,qEACFS,WAAY,QACZC,gBAAiB,KACjBb,MAAO,qBACPc,IACE,uEAfW,E,qDAyBT,IACAlB,EAAOmB,KAAKL,MAAMrB,QAAlBO,GACR,OACE,yBAAKG,UAAU,cACb,wBAAIA,UAAU,gBAAd,UACA,4GAEW,6BAFX,oHAI6C,6BAJ7C,kDAOA,kBAAC,EAAD,CAAWpB,WAAYoC,KAAKpC,aAC5B,yBAAKoB,UAAU,kBACZH,EAAK,kBAACoB,EAAD,CAAarB,KAAMoB,KAAKL,MAAMrB,UAAc,kBAAC4B,EAAD,Y,GAxCvCC,c,gBCHN,G,MAAA,WACb,OACE,gCACE,yBAAKnB,UAAU,YAAYK,IAAKe,IAAUd,IAAI,cAC9C,yBAAKN,UAAU,eAAf,+CCLS,G,MAAA,WACb,OACE,yBAAKA,UAAU,WACb,wBAAIA,UAAU,aAAd,gCACA,oE,wBCHS,aACb,OACE,gCACE,0EACA,yBAAKK,IAAKgB,IAAMf,IAAI,iB,MCUXgB,MAXf,WACE,OACE,yBAAKtB,UAAU,QACb,kBAACuB,EAAD,MACA,kBAACC,EAAD,MACA,kBAAC,EAAD,MACA,kBAACC,EAAD,QCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhD,SAASiD,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEd9C,OAAM,SAAAK,GACL0C,QAAQ1C,MAAMA,EAAM2C,c","file":"static/js/main.f7b58944.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nasa-logo.80115d2c.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./SearchFormStyles.css\";\n\nconst SeachForm = ({ getApiData }) => {\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        const dateParam = document.querySelector(\"input\").value;\n        getApiData(dateParam);\n      }}\n    >\n      <input type=\"text\" placeholder=\"Enter a date in YYYY-MM-DD format\" />\n      <button type=\"submit\" value=\"Search\">\n        Search\n      </button>\n    </form>\n  );\n};\n\nexport default SeachForm;\n","//Query Params\nconst API_KEY = \"dz421DMzsdaXSIJ4wFx31bh6alhptv5ZQpuVhKkW\";\nconst BASE_URL = \"https://api.nasa.gov/planetary/apod\";\nconst HD = true;\n\n// <data> is a string formatted into YYYY-MM-DD\nconst apiData = async (DATE) => {\n  const data = await fetch(\n    `${BASE_URL}?api_key=${API_KEY}&hd=${HD}&date=${DATE}`\n  ).catch((err) => {\n    return err;\n  });\n\n  let json;\n  data.ok\n    ? (json = { ...(await data.json()), ok: true })\n    : (json = { ok: false, error: \"Invalid input\" });\n\n  return json;\n};\n\nexport default apiData;\n","import React from \"react\";\nimport \"./ErrorStyles.css\";\n\nexport default () => {\n  return (\n    <div className=\"error-container\">\n      <h1>Whoops</h1>\n      <p>Please input a valid date or a more current date</p>\n    </div>\n  );\n};\n","import React, { Fragment } from \"react\";\nimport \"./DataDisplayStyles.css\";\n\nexport default ({ data }) => {\n  const { title, date, explanation, hdurl } = data;\n  return (\n    <Fragment>\n      <div className=\"data-img-wrapper\">\n        <img src={hdurl} alt=\"api pic\" />\n      </div>\n      <div className=\"data-text\">\n        <h1 className=\"data-title\">{title}</h1>\n        <p className=\"date\">{date}</p>\n        <p className=\"data-exp\">{explanation}</p>\n      </div>\n    </Fragment>\n  );\n};\n","import React, { Component } from \"react\";\nimport SeachForm from \"../SearchForm/SearchForm.js\";\nimport getData from \"../../api/APIData.js\";\nimport Error from \"../Error/Error.js\";\nimport DataDisplay from \"../DataDisplay/DataDisplay.js\";\nimport \"./SearchStyles.css\";\n\nclass Search extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      apiData: {\n        ok: true,\n        copyright: \"Dzmitry Kananovich\",\n        date: \"2020-06-21\",\n        explanation:\n          \"It may look like Earthrise, but it's actually Venus-set. Just after sunrise two days ago, both the Moon and Venus also rose.  But then the Moon overtook Venus. In the featured image sequence centered on the Moon, Venus is shown increasingly angularly close to the Moon. In the famous Earthrise image taken just over 50 years ago, the Earth was captured rising over the edge of the Moon, as seen from the Apollo 8 crew orbiting the Moon. This similar Venus-set image was taken from Earth, of course, specifically Estonia.  Venus shows only a thin crescent because last week it passed nearly in front of the Sun, as seen from Earth.  The Moon shows only a thin crescent because it will soon be passing directly in front of the Sun, as seen from Earth. Today, in fact, two days after this image was taken, the Moon will create a solar eclipse, with a thin swath across the Earth treated to an annular solar eclipse.    Gallery: Notable images of the Venus - Mooon conjunction of 2020 June submitted to APOD\",\n        hdurl:\n          \"https://apod.nasa.gov/apod/image/2006/VenusSet_Kananovich_1000.jpg\",\n        media_type: \"image\",\n        service_version: \"v1\",\n        title: \"Moon Occults Venus\",\n        url:\n          \"https://apod.nasa.gov/apod/image/2006/VenusSet_Kananovich_1000.jpg\",\n      },\n    };\n  }\n\n  getApiData = async (date) => {\n    const data = await getData(date);\n    this.setState({ apiData: data });\n  };\n\n  render() {\n    const { ok } = this.state.apiData;\n    return (\n      <div className=\"search-box\">\n        <h1 className=\"search-title\">Search</h1>\n        <p>\n          The Astronomy Picture of the Day (APOD) is the most used API offered\n          by NASA. <br />\n          It's incredible imagery transcends our galaxies and offers a creative\n          way to learn about the universe around us. <br />\n          Try putting a date below and see what pops up!\n        </p>\n        <SeachForm getApiData={this.getApiData} />\n        <div className=\"data-container\">\n          {ok ? <DataDisplay data={this.state.apiData} /> : <Error />}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React from \"react\";\nimport nasaLogo from \"../../assests/nasa-logo.svg\";\nimport \"./HeaderStyles.css\";\n\nexport default () => {\n  return (\n    <header>\n      <img className=\"nasa-logo\" src={nasaLogo} alt=\"nasa logo\" />\n      <div className=\"header-text\">\n        Search and Learn More about the Universe\n      </div>\n    </header>\n  );\n};\n","import React from \"react\";\nimport \"./HeroStyles.css\";\n\nexport default () => {\n  return (\n    <div className=\"herobox\">\n      <h1 className=\"hero-text\">Astronomy Picture of the Day</h1>\n      <p>Take a look at some cool pictures!</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./FooterStyles.css\";\nimport logo from \"../../logo.svg\";\n\nexport default () => {\n  return (\n    <footer>\n      <p>designed and developed by Aarya Patel with </p>\n      <img src={logo} alt=\"react logo\" />\n    </footer>\n  );\n};\n","import React from \"react\";\nimport Search from \"./component/Search/Search.js\";\nimport Header from \"./component/Header/Header.js\";\nimport Hero from \"./component/Hero/Hero.js\";\nimport Footer from \"./component/Footer/Footer.js\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"main\">\n      <Header />\n      <Hero />\n      <Search />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}